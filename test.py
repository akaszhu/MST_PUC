# # import openai

# API_KEY = ''

# from openai import OpenAI
# client = OpenAI(api_key=API_KEY)
# # media_file_path = 'C:/Users/Akash/Downloads/This is the leadership quality Dr. APJ Abdul Kalam speech [TubeRipper.com].mp3'
# # audio_file = open(media_file_path, 'rb')
# # transcript = client.audio.transcriptions.create(
# #   model="whisper-1",
# #   file=audio_file
# # )


# # print(transcript.text, type(transcript))

# prompt = """ the below content is extracted from a hand written medical description can you analye and find and give me
# doctor name: 
# patient name:
# patient age:
# medicine names: 

# [([[258, 18], [296, 18], [296, 44], [258, 44]], 'DD', 0.9997059962449747),
#  ([[307, 15], [417, 15], [417, 53], [307, 53]],
#   'FOAM  1289',
#   0.7195803157076516),
#  ([[318, 56], [380, 56], [380, 80], [318, 80]], 'NOv 71', 0.6808482574800544),
#  ([[227, 78], [453, 78], [453, 114], [227, 114]],
#   'DOD PRESCRIPTION',
#   0.9864025298928097),
#  ([[19, 119], [51, 119], [51, 139], [19, 139]], 'FOR', 0.951642347391676),
#  ([[58, 118], [196, 118], [196, 142], [58, 142]],
#   '(Full nameaddress,',
#   0.3025788916272425),
#  ([[212, 114], [474, 114], [474, 140], [212, 140]],
#   'phona numbar) ( under 12,givo 392)',
#   0.27005506283277797),
#  ([[42, 146], [180, 146], [180, 172], [42, 172]],
#   'John &_Dee',
#   0.22191646863263426),
#  ([[192, 148], [246, 148], [246, 172], [192, 172]], 'HMB', 0.2689121884977347),
#  ([[259, 144], [312, 144], [312, 170], [259, 170]], 'USN', 0.7276971606822535),
#  ([[42, 204], [104, 204], [104, 230], [42, 230]], 'USS', 0.3508828697789486),
#  ([[118, 204], [202, 204], [202, 228], [118, 228]],
#   'Never',
#   0.9392277308245522),
#  ([[198, 197], [331, 197], [331, 236], [198, 236]],
#   'fergotten',
#   0.5281698212884559),
#  ([[364, 200], [408, 200], [408, 226], [364, 226]], '(DD', 0.9809404015541077),
#  ([[422, 202], [464, 202], [464, 226], [422, 226]], '78)', 0.5291383567782402),
#  ([[21, 247], [151, 247], [151, 267], [21, 267]],
#   'MEDCAL FACLIY',
#   0.8946300678797791),
#  ([[471, 245], [515, 245], [515, 263], [471, 263]],
#   'DATE',
#   0.9879006147384644),
#  ([[26, 272], [96, 272], [96, 298], [26, 298]], 'USS:', 0.5523717999458313),
#  ([[104, 266], [308, 266], [308, 296], [104, 296]],
#   'Nerer forgotten',
#   0.9338741440062543),
#  ([[320, 266], [368, 266], [368, 294], [320, 294]],
#   '(D0',
#   0.34000914648144087),
#  ([[382, 270], [422, 270], [422, 296], [382, 296]], '78)', 0.9989739509407529),
#  ([[494, 256], [608, 256], [608, 288], [494, 288]],
#   '23 Jan 59',
#   0.5644834209920586),
#  ([[24, 324], [54, 324], [54, 356], [24, 356]], 'R', 0.4984406909845952),
#  ([[64, 328], [204, 328], [204, 356], [64, 356]],
#   '(Superscription)',
#   0.8503573674356953),
#  ([[524, 326], [558, 326], [558, 350], [524, 350]], 'gm', 0.9961070956411378),
#  ([[582, 320], [614, 320], [614, 346], [582, 346]], 'ml;', 0.5615570042411442),
#  ([[89, 365], [196, 365], [196, 395], [89, 395]],
#   '(Inscription)',
#   0.897185758657306),
#  ([[219, 393], [360, 393], [360, 426], [219, 426]],
#   'Reludanna',
#   0.7371711300511824),
#  ([[532, 396], [558, 396], [558, 420], [532, 420]], '15', 0.9992737184853183),
#  ([[571, 401], [609, 401], [609, 421], [571, 421]], 'ane', 0.3973332909330121),
#  ([[185, 430], [317, 430], [317, 474], [185, 474]],
#   'Amphaee',
#   0.6442817208431953),
#  ([[516, 436], [564, 436], [564, 460], [516, 460]], '120', 0.9835550285196347),
#  ([[570, 436], [610, 436], [610, 460], [570, 460]], 'me', 0.9843355508183181),
#  ([[79, 488], [202, 488], [202, 519], [79, 519]],
#   '(Subscription)',
#   0.9428615106096927),
#  ([[183, 517], [409, 517], [409, 557], [183, 557]],
#   'mv #fL foeutio',
#   0.18678760296550007),
#  ([[82, 568], [150, 568], [150, 598], [82, 598]],
#   '(Signe)',
#   0.5966882729297546),
#  ([[178, 594], [248, 594], [248, 648], [178, 648]],
#   'Sd:',
#   0.22975740348026216),
#  ([[258, 596], [320, 596], [320, 624], [258, 624]], 'SmQ', 0.5955657301376275),
#  ([[330, 598], [370, 598], [370, 624], [330, 624]], 'Ld', 0.282636645343893),
#  ([[379, 605], [417, 605], [417, 623], [379, 623]],
#   '0.6',
#   0.17151771485805511),
#  ([[21, 729], [69, 729], [69, 749], [21, 749]], 'MFgr:', 0.1359862577843236),
#  ([[102, 728], [168, 728], [168, 752], [102, 752]],
#   'Weh',
#   0.43852972881556285),
#  ([[380, 724], [462, 724], [462, 748], [380, 748]],
#   'EXP OATE:',
#   0.6110661532302478),
#  ([[486, 726], [548, 726], [548, 750], [486, 750]],
#   'ploz',
#   0.33023566007614136),
#  ([[21, 751], [83, 751], [83, 771], [21, 771]], 'LoT NO:', 0.3998610717701942),
#  ([[99, 749], [194, 749], [194, 775], [99, 775]],
#   'P3aK 4 06',
#   0.0635773192634786),
#  ([[379, 751], [463, 751], [463, 771], [379, 771]],
#   'FLLED BY:',
#   0.8002429643229937),
#  ([[481, 751], [529, 751], [529, 771], [481, 771]], 'KMt', 0.3597072332937954),
#  ([[431, 779], [583, 779], [583, 821], [431, 821]],
#   'Jack E Frost',
#   0.2858813508509472),
#  ([[430, 812], [642, 812], [642, 842], [430, 842]],
#   'LCDE ID, USiR',
#   0.15409780148456267),
#  ([[170, 830], [232, 830], [232, 856], [170, 856]],
#   '10072',
#   0.999987045170451),
#  ([[30, 846], [120, 846], [120, 870], [30, 870]],
#   'R Number',
#   0.4118634659776634),
#  ([[414, 846], [646, 846], [646, 870], [414, 870]],
#   'SKGNATURE RANK And degreE',
#   0.18464376042374864),
#  ([[197, 883], [277, 883], [277, 903], [197, 903]],
#   'EOMION OF',
#   0.5411932626129508),
#  ([[291, 883], [453, 883], [453, 903], [291, 903]],
#   'JAN 80 MAY Be Used',
#   0.43895032500367587),
#  ([[461, 883], [493, 883], [493, 903], [461, 903]], 'For', 0.7013971906011547),
#  ([[258, 904], [430, 904], [430, 928], [258, 928]],
#   'Sin 0102-LF-012-6201',
#   0.5901554885861908),
#  ([[316.13701426866953, 441.46032711047206],
#    [384.3722497617355, 433.8487372209618],
#    [386.86298573133047, 467.53967288952794],
#    [319.6277502382645, 475.1512627790382]],
#   '9984',
#   0.224905863404274)]"""

# response = client.chat.completions.create(
#         model='gpt-3.5-turbo',
#         messages=[
#                 {'role': 'user', 'content': prompt}
#             ],
#             temperature=0,
#         )
# messages = [choice.message.content for choice in response.choices]
# print(messages[0])


def extract_text(data):
    extracted_text = []
    for entry in data:
        text = entry[1]  # Extracting the text from the tuple
        extracted_text.append(text)
    return extracted_text

# Example data in the given format
example_data = [
    ([[258, 18], [296, 18], [296, 44], [258, 44]], 'DD', 0.9997059962449747),
    ([[307, 15], [417, 15], [417, 53], [307, 53]], 'FOAM  1289', 0.7195803157076516),
    # ... (other entries)
]

# Extracting text from the example data
extracted_text = extract_text(example_data)
print(extracted_text)